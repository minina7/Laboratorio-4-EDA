import java.util.*;
import java.io.FileWriter;
import java.io.IOException;

class Paciente implements Comparable<Paciente> {
    private String nombre;
    private String apellido;
    private String id;
    private int categoria; 
    private long tiempoLlegada;
    private String estado; 
    private String area; 
    private Stack<String> historialCambios;

    public Paciente(String nombre, String apellido, String id, int categoria, long tiempoLlegada, String estado, String area) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.id = id;
        this.categoria = categoria;
        this.tiempoLlegada = tiempoLlegada;
        this.estado = estado;
        this.area = area;
        this.historialCambios = new Stack<>();
    }

    public long tiempoEsperaActual(long tiempoActual) {
        return Math.max(0, (tiempoActual - this.tiempoLlegada) / (60 * 1000));
    }

    public void registrarCambio(String descripcion) {
        historialCambios.push(descripcion);
    }

    public String obtenerUltimoCambio() {
        if (!historialCambios.isEmpty()) {
            return historialCambios.pop();
        }
        return "Sin cambios registrados";
    }
    
    public String getId() {
        return id;
    }
    public String getNombre() {
        return nombre;
    }
    public String getApellido() {
        return apellido;
    }
    public int getCategoria() {
        return categoria;
    }
    public void setCategoria(int nueva) {
        this.categoria = nueva;
    }
    public String getArea() {
        return area;
    }
    public long getTiempoLlegada() {
        return tiempoLlegada;
    }
    public String getEstado() {
        return estado;
    }
    public void setEstado(String estado) {
        this.estado = estado;
    }
    
    @Override
    public int compareTo(Paciente otro) {
        if (this.categoria != otro.categoria) {
            return Integer.compare(this.categoria, otro.categoria);
        }
        return Long.compare(this.tiempoLlegada, otro.tiempoLlegada);
    }
}

class AreaAtencion {
    private String nombre;
    private PriorityQueue<Paciente> pacientesHeap;
    private int capacidadMaxima;

    public AreaAtencion(String nombre, int capacidadMaxima) {
        this.nombre = nombre;
        this.capacidadMaxima = capacidadMaxima;
        this.pacientesHeap = new PriorityQueue<>();
    }

    public void ingresarPaciente(Paciente p) {
       pacientesHeap.add(p);
    }
    
    public Paciente atenderPaciente() {
        if (!pacientesHeap.isEmpty()) {
            return pacientesHeap.poll(); 
        }
        return null;
    }

    public boolean estaSaturada() {
        return pacientesHeap.size() >= capacidadMaxima;
    }
    
    public List<Paciente> obtenerPacientesPorHeapSort() {
        PriorityQueue<Paciente> copia = new PriorityQueue<>(pacientesHeap);
        List<Paciente> ordenados = new ArrayList<>();

        while (!copia.isEmpty()) {
            ordenados.add(copia.poll());
        }

        return ordenados;
    }
}

class Hospital {
    private Map<String, Paciente> pacientesTotales;
    private PriorityQueue<Paciente> colaAtencion;
    private Map<String, AreaAtencion> areasAtencion;
    private List<Paciente> pacientesAtendidos;

    public Hospital() {
        pacientesTotales = new HashMap<>();
        colaAtencion = new PriorityQueue<>();
        areasAtencion = new HashMap<>();
        pacientesAtendidos = new ArrayList<>();
 
        areasAtencion.put("SAPU", new AreaAtencion("SAPU", 25));
        areasAtencion.put("urgencia_adulto", new AreaAtencion("urgencia_adulto", 30));
        areasAtencion.put("infantil", new AreaAtencion("infantil", 15));
    }

    public void registrarPaciente(Paciente p) {
        pacientesTotales.put(p.getId(), p);
        colaAtencion.add(p);
        AreaAtencion area = obtenerArea(p.getArea());
        if (area != null) {
            area.ingresarPaciente(p);
        }
    }
    
    public void reasignarCategoria(String id, int nuevaCategoria) {
        Paciente p = pacientesTotales.get(id);
        if (p != null) {
            p.registrarCambio("categor√≠a cambiada" + p.getCategoria() + " a " + nuevaCategoria);
            p.setCategoria(nuevaCategoria);
        }
    }
    
    public Paciente atenderSiguiente() {
        Paciente siguiente = colaAtencion.poll();
        if (siguiente != null) {
            siguiente.setEstado("atendido");
            pacientesAtendidos.add(siguiente);
        }
        return siguiente;
    }
    
    public List<Paciente> obtenerPacientesPorCategoria(int categoria) {
        List<Paciente> resultado = new ArrayList<>();
        for (Paciente p : colaAtencion) {
            if (p.getCategoria() == categoria) {
                resultado.add(p);
            }
        }
        return resultado;
    }
    
    public AreaAtencion obtenerArea(String nombre) {
        return areasAtencion.get(nombre);
    }
    
    public PriorityQueue<Paciente> getColaAtencion() {
        return colaAtencion;
    }
    
}

